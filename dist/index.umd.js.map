{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\ntype Options = {\n  strict?: boolean\n}\n\nclass DryReplacer {\n  data: object\n  strict: boolean = true\n\n  constructor(data: object, options?: Options) {\n    this.data = data\n    this.strict = options?.strict\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n\n        if (\n          ['undefined', undefined, null, 'string'].includes(\n            typeof valueFromData\n          )\n        ) {\n          if (this.strict) {\n            newValue = spotting.replace(item, valueFromData)\n          } else {\n            newValue = spotting.replace(item, valueFromData || '')\n          }\n        }\n\n        if (['number'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n        }\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["DryReplacer","data","options","this","strict","_proto","prototype","replaceValue","key","value","template","matchedArray","String","match","_step","_iterator","_createForOfIteratorHelperLoose","reverse","done","item","patternKey","replace","spotting","get","valueFromData","newValue","undefined","includes","set","recursiveReplace","Object","keys","_i","_Object$keys","length","isPlainObject","isArray","map","_this","jsonToParse","JSON","parse"],"mappings":";OAaE,WAAA,SAAAA,EAAYC,EAAcC,GAAiBC,KAH3CF,UAAI,EAAAE,KACJC,QAAkB,EAGhBD,KAAKF,KAAOA,EACZE,KAAKC,OAAgB,MAAPF,OAAO,EAAPA,EAASE,MACzB,CAAC,IAAAC,EAAAL,EAAAM,UAsDA,OAtDAD,EAEDE,aAAA,SAAaC,EAAaC,EAAYR,EAAcS,GAClD,IAAIC,EAAeC,OAAOH,GAAOI,MAAM,YAEvC,GAAIF,EACF,IAAA,IAAuCG,EAAvCC,2qBAAAC,CAAiBL,EAAaM,aAASH,EAAAC,KAAAG,MAAE,CAAhCC,IAAAA,UACHC,EAAaD,EAAKE,QAAQ,QAAS,IAC3BC,EAAGC,EAAAA,QAAIb,EAAUF,GAEZgB,EAAGD,UAAItB,EAAMmB,GAC1BK,EAAWD,EAGb,CAAC,iBAAaE,EAAW,KAAM,UAAUC,gBAChCH,KAIPC,EAAWH,EAASD,QAAQF,EAD1BhB,KAAKC,OAC2BoB,EAEAA,GAAiB,KAInD,CAAC,UAAUG,gBAAgBH,KAC7BC,EAAWH,EAASD,QAAQF,EAAMK,IAGpCI,UAAIlB,EAAUF,EAAKiB,EACpB,CAEL,EAACpB,EAEDwB,iBAAA,SAAiB5B,EAAcS,GAC7B,eAAgBoB,EAAAA,EAAAA,EAAAA,OAAOC,KAAKrB,GAASsB,EAAAC,EAAAC,OAAAF,IAAE,CAAlC,MACHC,EAAAD,GAASvB,EAAGC,EAASF,GAEjB2B,EAAa,QAAC1B,GAChBN,KAAK0B,iBAAiB5B,EAAMQ,GACnB2B,UAAQ3B,GACjBA,EAAM4B,IAAI,SAAClB,GAAS,OAAAmB,EAAKT,iBAAiB5B,EAAMkB,EAAK,GAErDhB,KAAKI,aAAaC,EAAKC,EAAOR,EAAMS,EAEvC,CACD,QACF,EAACL,EAAA,IAED,SAAIkC,GACF,MAAeC,KAAKC,MAAMF,GAG1B,OAFApC,KAAK0B,iBAAiB1B,KAAKF,KAAMS,IAGnC,EAACV,CAAA,CAzDD"}