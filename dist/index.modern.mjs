import e from"lodash.get";import t from"lodash.set";import r from"lodash.isarray";import s from"lodash.isplainobject";const i=e=>![!1,"false"].includes(e)&&(!![!0,"true"].includes(e)||e),l=e=>["false"].includes(String(e)),a=e=>["true"].includes(String(e)),c=e=>["string"].includes(typeof e),o=e=>[void 0,null].includes(e);class p{constructor(e,t){this.data=void 0,this.strict=!0,this.keepTypeof=!1,this.data=e,this.strict=null==t?void 0:t.strict,this.keepTypeof=null==t?void 0:t.keepTypeof}replaceValue(r,s,p,u){let n=String(s).match(/{{.*?}}/g);if(n)for(let s of n.reverse()){let n=s.replace(/[{}]/g,""),d=e(u,r),f=e(p,n),h=f;o(f)&&(f=""),(l(f)||a(f))&&(f=String(f)),c(f)&&(h=d.replace(s,this.strict?f:f||"")),["number"].includes(typeof f)&&(h=d.replace(s,f),this.keepTypeof&&/^-?\.?_?\d+$/.test(h)&&(h=Number(h))),l(h)&&(h=i(h)),a(h)&&(h=i(h)),t(u,r,h)}}recursiveReplace(e,t){for(let i of Object.keys(t)){let l=t[i];s(l)?this.recursiveReplace(e,l):r(l)?l.map(t=>this.recursiveReplace(e,t)):this.replaceValue(i,l,e,t)}return t}try(e){let t=JSON.parse(e);return this.recursiveReplace(this.data,t),t}}export{p as default};
//# sourceMappingURL=index.modern.mjs.map
