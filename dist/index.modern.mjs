import e from"lodash.get";import t from"lodash.set";import i from"lodash.isarray";import s from"lodash.isplainobject";const r=e=>![!1,"false"].includes(e)&&(!![!0,"true"].includes(e)||e),l=e=>["false"].includes(String(e)),o=e=>["true"].includes(String(e)),a=e=>["string"].includes(typeof e),c=e=>[void 0,null].includes(e);class p{constructor(e,t){this.data=void 0,this.strict=!0,this.keepTypeof=!1,this.stringifyTypeof=!1,this.data=e,this.strict=null==t?void 0:t.strict,this.keepTypeof=null==t?void 0:t.keepTypeof,this.stringifyTypeof=null==t?void 0:t.stringifyTypeof}replaceValue(i,p,n,f){let u=String(p).match(/{{.*?}}/g);if(u)for(let p of u.reverse()){let h=p.replace(/[{}]/g,""),d=e(f,i),y=e(n,h),g=y;c(y)&&(y=""),(l(y)||o(y))&&(y=String(y)),u.length>1&&this.stringifyTypeof&&(Array.isArray(y)||s(y))&&(y=JSON.stringify(y)),a(y)&&(g=d.replace(p,this.strict?y:y||"")),["number"].includes(typeof y)&&(g=d.replace(p,y),this.keepTypeof&&/^-?\.?_?\d+$/.test(g)&&(g=Number(g))),l(g)&&(g=r(g)),o(g)&&(g=r(g)),t(f,i,g)}}recursiveReplace(e,t){for(let r of Object.keys(t)){let l=t[r];s(l)?this.recursiveReplace(e,l):i(l)?l.map(t=>this.recursiveReplace(e,t)):this.replaceValue(r,l,e,t)}return t}try(e,t={}){t&&Object.assign(this,t);let i=JSON.parse(e);return this.recursiveReplace(this.data,i),i}}export{p as default};
//# sourceMappingURL=index.modern.mjs.map
