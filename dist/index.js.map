<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\nclass DryReplacer {\n  data: object\n\n  constructor(data: object) {\n    this.data = data\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n\n        if (['string'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n        }\n\n        if (['number'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n        }\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["data","this","replaceValue","key","value","template","matchedArray","String","match","_step","_iterator","_createForOfIteratorHelperLoose","reverse","done","item","patternKey","replace","spotting","get","valueFromData","newValue","includes","set","recursiveReplace","_this","Object","keys","_i","_Object$keys","length","isPlainObject","isArray","map","_proto","jsonToParse","JSON","parse","DryReplacer"],"mappings":"oZAKiB,WAGf,WAAYA,GAFZA,KAAAA,UAGE,EAAAC,KAAKD,KAAOA,CACd,CAAC,IAEDE,EAAAA,EAAAA,UA4CC,OA5CDA,EAAAA,aAAA,SAAaC,EAAaC,EAAYJ,EAAcK,GAClD,IAAIC,EAAeC,OAAOH,GAAOI,MAAM,YAEvC,GAAIF,EACF,IAAA,IAAuCG,EAAvCC,2qBAAAC,CAAiBL,EAAaM,aAASH,EAAAC,KAAAG,MAAE,CAAhCC,IAAAA,EACPL,EAAAL,MAAcW,EAAGD,EAAKE,QAAQ,QAAS,IAC3BC,EAAGC,EAAAA,QAAIb,EAAUF,GAEzBgB,EAAgBD,EAAG,QAAClB,EAAMe,GAClBK,EAAGD,EAEX,CAAC,UAAUE,gBAAgBF,KAC7BC,EAAWH,EAASD,QAAQF,EAAMK,IAGhC,CAAC,UAAUE,gBAA6BF,KAC1CC,EAAWH,EAASD,QAAQF,EAAMK,IAGpCG,EAAG,QAACjB,EAAUF,EAAKiB,EACpB,CAEL,IAEAG,iBAAA,SAAiBvB,EAAcK,GAC7B,IAD0C,IAAAmB,EAAAvB,WAC1BwB,OAAOC,KAAKrB,GAAWsB,EAAAC,EAAAC,OAAAF,IAAA,CAAlC,IAAOxB,EAAAyB,EAAAD,GACNvB,EAAQC,EAASF,GAEjB2B,UAAc1B,GAChBH,KAAKsB,iBAAiBvB,EAAMI,GACnB2B,EAAO,QAAC3B,GACjBA,EAAM4B,IAAI,SAAClB,GAAI,OAASU,EAACD,iBAAiBvB,EAAMc,EAAK,GAErDb,KAAKC,aAAaC,EAAKC,EAAOJ,EAAMK,EAEvC,CACD,OACFA,CAAA,EAEA4B,EAAA,IAAA,SAAIC,GACF,IAAI7B,EAAW8B,KAAKC,MAAMF,GAG1B,OAFAjC,KAAKsB,iBAAiBtB,KAAKD,KAAMK,GAE1BA,CACT,EAACgC,CAAA,CAnDc"}
=======
{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\ntype Options = {\n  strict?: boolean\n}\n\nclass DryReplacer {\n  data: object\n  strict: boolean = true\n\n  constructor(data: object, options?: Options) {\n    this.data = data\n    this.strict = options?.strict\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n        \n        if (['undefined', undefined, null, 'string'].includes(typeof valueFromData)) {\n          if (this.strict) {\n            newValue = spotting.replace(item, valueFromData)\n          } else {\n            newValue = spotting.replace(item, valueFromData || '')\n          }\n        }\n\n        \n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["data","options","strict","this","_proto","DryReplacer","prototype","replaceValue","key","value","template","matchedArray","String","match","_step","reverse","_iterator","done","patternKey","item","replace","get","newValue","valueFromData","undefined","includes","spotting","set","recursiveReplace","_this","Object","keys","_Object$keys","_i","isPlainObject","isArray","map","jsonToParse","JSON","parse"],"mappings":"oZASiB,WAIf,SAAYA,EAAAA,EAAcC,GAH1BD,KAAAA,iBACAE,QAAkB,EAGhBC,KAAKH,KAAOA,EACZG,KAAKD,OAAgB,MAAPD,OAAO,EAAPA,EAASC,MACzB,CAAC,IAAAE,EAAAC,EAAAC,UA+CA,OA/CAF,EAEDG,aAAA,SAAaC,EAAaC,EAAYT,EAAcU,GAClD,IAAgBC,EAAGC,OAAOH,GAAOI,MAAM,YAEvC,GAAIF,EACF,IAAiBA,IAAwBG,EAAxBH,2qBAAAA,CAAAA,EAAaI,aAAWD,EAAAE,KAAAC,MAAA,CAAA,MACvCH,EAAAL,MAAcS,EAAGC,EAAKC,QAAQ,QAAS,MACxBC,EAAG,QAACX,EAAUF,KAETa,EAAAA,QAAIrB,EAAMkB,GAClBI,EAAGC,EAEX,CAAC,iBAAaC,EAAW,KAAM,UAAUC,gBAAgBF,KAEzDD,EAAWI,EAASN,QAAQD,EAD1BhB,KAAKD,OAC2BqB,EAEAA,GAAiB,KAKvDI,UAAIjB,EAAUF,EAAKc,EACpB,CAEL,EAEAM,EAAAA,iBAAA,SAAiB5B,EAAcU,GAC7B,IAD0C,IAAAmB,EAAA1B,KAC1B2B,EAAAA,EAAAA,EAAAA,OAAOC,KAAKrB,kBAAW,CAAlC,IAAOF,EAAAwB,EAAAC,GACDxB,EAAGC,EAASF,GAEjB0B,EAAAA,QAAczB,GAChBN,KAAKyB,iBAAiB5B,EAAMS,GACnB0B,EAAO,QAAC1B,GACjBA,EAAM2B,IAAI,SAACjB,GAAI,SAAUS,iBAAiB5B,EAAMmB,EAAK,GAErDhB,KAAKI,aAAaC,EAAKC,EAAOT,EAAMU,EAEvC,CACD,OACFA,CAAA,QAEA,SAAI2B,GACF,IAAY3B,EAAG4B,KAAKC,MAAMF,GAG1B,OAFAlC,KAAKyB,iBAAiBzB,KAAKH,KAAMU,GAE1BA,CACT,EAACL,CAAA,CAtDc"}
>>>>>>> 2b856851a27a4269c36b8bcc7edcc6c4eb544550
