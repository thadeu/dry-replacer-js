{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\ntype Options = {\n  strict?: boolean\n  keepTypeof?: boolean\n}\n\nconst castBoolean = strOrBool => {\n  if ([false, 'false'].includes(strOrBool)) {\n    return false\n  }\n\n  if ([true, 'true'].includes(strOrBool)) {\n    return true\n  }\n\n  return strOrBool\n}\n\nconst isFalsy = bool => ['false'].includes(String(bool))\n\nconst isTruthy = bool => ['true'].includes(String(bool))\n\nconst isString = data => [\n  'string',\n].includes(typeof data)\n\nconst isNullify = data => [\n  undefined,\n  null,\n].includes(data)\n\nclass DryReplacer {\n  data: object\n  strict?: boolean = true\n  keepTypeof?: boolean = false\n\n  constructor(data: object, options?: Options) {\n    this.data = data\n    this.strict = options?.strict\n    this.keepTypeof = options?.keepTypeof\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n\n        if (isNullify(valueFromData)) {\n          valueFromData = ''\n        }\n\n        if (isFalsy(valueFromData) || isTruthy(valueFromData)) {\n          valueFromData = String(valueFromData)\n        }\n\n        if (isString(valueFromData)) {\n          if (this.strict) {\n            newValue = spotting.replace(item, valueFromData)\n          } else {\n            newValue = spotting.replace(item, valueFromData || '')\n          }\n        }\n\n        if (['number'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n\n          if (this.keepTypeof && /^-?\\.?_?\\d+$/.test(newValue)) {\n            newValue = Number(newValue)\n          }\n        }\n\n        if (isFalsy(newValue)) {\n          newValue = castBoolean(newValue)\n        }\n\n        if (isTruthy(newValue)) {\n          newValue = castBoolean(newValue)\n        }\n\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["castBoolean","strOrBool","includes","isFalsy","bool","String","isTruthy","isString","data","isNullify","undefined","options","this","strict","keepTypeof","replaceValue","key","value","template","matchedArray","match","_step","reverse","_iterator","done","item","patternKey","replace","spotting","get","valueFromData","newValue","test","Number","set","_proto","recursiveReplace","_this","Object","keys","_i","_Object$keys","length","isPlainObject","isArray","map","jsonToParse","JSON","parse","DryReplacer"],"mappings":"wXAUA,IAAiBA,EAAG,SAAAC,GAClB,OAAI,EAAC,EAAO,SAASC,SAASD,OAI1B,EAAC,EAAM,QAAQC,SAASD,IAIrBA,EACT,EAEaE,EAAG,SAAAC,GAAQ,MAAA,CAAC,SAASF,SAASG,OAAOD,GAAM,EAE1CE,EAAG,SAAAF,GAAQ,MAAA,CAAC,QAAQF,SAASG,OAAOD,GAAM,EAElDG,EAAW,SAAAC,GAAI,MAAI,CACvB,UACAN,gBAAoBM,EAAC,EAERC,EAAG,SAAAD,SAAQ,MACxBE,EACA,MACAR,SAASM,EAAK,8BAEC,WAKf,SAAYA,EAAAA,EAAcG,GAAiBC,KAJ3CJ,UAAI,EAAAI,KACJC,QAAmB,EAAID,KACvBE,YAAuB,EAGrBF,KAAKJ,KAAOA,EACZI,KAAKC,OAASF,MAAAA,OAAAA,EAAAA,EAASE,OACvBD,KAAKE,WAAoB,MAAPH,OAAO,EAAPA,EAASG,UAC7B,CAAC,IAEDC,EAAAA,EAAAA,UAqEC,OArEDA,EAAAA,aAAA,SAAaC,EAAaC,EAAYT,EAAcU,GAClD,IAAIC,EAAed,OAAOY,GAAOG,MAAM,YAEvC,GAAID,EACF,IAAiBA,IAAsBE,EAAtBF,2qBAAAA,CAAAA,EAAaG,aAASD,EAAAE,KAAAC,MAAE,CAAhCC,IAAAA,EACPJ,EAAAJ,MAAcS,EAAGD,EAAKE,QAAQ,QAAS,IACnCC,EAAWC,EAAAA,QAAIX,EAAUF,GAEZc,EAAGD,EAAAA,QAAIrB,EAAMkB,GAClBK,EAAGD,EAEXrB,EAAUqB,KACZA,EAAgB,KAGd3B,EAAQ2B,IAAkBxB,EAASwB,MACrCA,EAAgBzB,OAAOyB,IAGrBvB,EAASuB,KAETC,EAAWH,EAASD,QAAQF,EAD1Bb,KAAKC,OAC2BiB,EAEAA,GAAiB,KAInD,CAAC,UAAU5B,gBAA6B4B,KAC1CC,EAAWH,EAASD,QAAQF,EAAMK,GAE9BlB,KAAKE,YAAc,eAAekB,KAAKD,KACzCA,EAAWE,OAAOF,KAIlB5B,EAAQ4B,KACVA,EAAW/B,EAAY+B,IAGrBzB,EAASyB,KACXA,EAAW/B,EAAY+B,IAIzBG,EAAG,QAAChB,EAAUF,EAAKe,EACpB,CAEL,EAACI,EAEDC,iBAAA,SAAiB5B,EAAcU,GAC7B,IAD0C,IAAAmB,EAAAzB,KAC1B0B,EAAAA,EAAAA,EAAAA,OAAOC,KAAKrB,GAASsB,EAAAC,EAAAC,OAAAF,IAAE,CAAlC,IAAIxB,EACPyB,EAAAD,GAASvB,EAAGC,EAASF,GAEjB2B,EAAAA,QAAc1B,GAChBL,KAAKwB,iBAAiB5B,EAAMS,GACnB2B,EAAO,QAAC3B,GACjBA,EAAM4B,IAAI,SAACpB,GAAI,OAASY,EAACD,iBAAiB5B,EAAMiB,EAAK,GAErDb,KAAKG,aAAaC,EAAKC,EAAOT,EAAMU,EAEvC,CACD,OAAOA,CACT,EAACiB,EAAA,IAED,SAAIW,GACF,IAAI5B,EAAW6B,KAAKC,MAAMF,GAG1B,OAFAlC,KAAKwB,iBAAiBxB,KAAKJ,KAAMU,GAE1BA,CACT,EAAC+B,CAAA,CAhFc"}