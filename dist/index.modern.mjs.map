{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\ntype Options = {\n  strict?: boolean\n}\n\nclass DryReplacer {\n  data: object\n  strict: boolean = true\n\n  constructor(data: object, options?: Options) {\n    this.data = data\n    this.strict = options?.strict\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n\n        if (\n          ['undefined', undefined, null, 'string'].includes(\n            typeof valueFromData\n          )\n        ) {\n          if (this.strict) {\n            newValue = spotting.replace(item, valueFromData)\n          } else {\n            newValue = spotting.replace(item, valueFromData || '')\n          }\n        }\n\n        if (['number'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n        }\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["constructor","data","options","strict","this","replaceValue","key","value","template","matchedArray","String","match","item","reverse","patternKey","replace","spotting","get","valueFromData","newValue","undefined","includes","set","recursiveReplace","Object","keys","isPlainObject","isArray","map","try","jsonToParse","JSON","parse"],"mappings":"sHASA,QAIEA,YAAYC,EAAcC,GAH1BD,KAAAA,iBACAE,QAAkB,EAGhBC,KAAKH,KAAOA,EACZG,KAAKD,aAASD,SAAAA,EAASC,MACzB,CAEAE,aAAaC,EAAaC,EAAYN,EAAcO,GAClD,IAAgBC,EAAGC,OAAOH,GAAOI,MAAM,YAEvC,GAAIF,EACF,IAAK,IAAQG,OAAiBC,UAAW,CACvC,IAAIC,EAAaF,EAAKG,QAAQ,QAAS,IACnCC,EAAWC,EAAIT,EAAUF,GAEzBY,EAAgBD,EAAIhB,EAAMa,GAClBK,EAAGD,EAGb,CAAC,iBAAaE,EAAW,KAAM,UAAUC,qBAKvCF,EAAWH,EAASD,QAAQH,EAD1BR,KAAKD,OAC2Be,EAEAA,GAAiB,KAInD,CAAC,UAAUG,gBAAgBH,KAC7BC,EAAWH,EAASD,QAAQH,EAAMM,IAGpCI,EAAId,EAAUF,EAAKa,EACpB,CAEL,CAEAI,iBAAiBtB,EAAcO,GAC7B,IAAK,SAAWgB,OAAOC,KAAKjB,GAAW,CACrC,IAASD,EAAGC,EAASF,GAEjBoB,EAAcnB,GAChBH,KAAKmB,iBAAiBtB,EAAMM,GACnBoB,EAAQpB,GACjBA,EAAMqB,IAAKhB,GAASR,KAAKmB,iBAAiBtB,EAAMW,IAEhDR,KAAKC,aAAaC,EAAKC,EAAON,EAAMO,EAEvC,CACD,QACF,CAEAqB,IAAIC,GACF,MAAeC,KAAKC,MAAMF,GAG1B,OAFA1B,KAAKmB,iBAAiBnB,KAAKH,KAAMO,IAGnC"}