{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\ntype Options = {\n  strict?: boolean\n  keepTypeof?: boolean\n}\n\nconst castBoolean = strOrBool => {\n  if ([false, 'false'].includes(strOrBool)) {\n    return false\n  }\n\n  if ([true, 'true'].includes(strOrBool)) {\n    return true\n  }\n\n  return strOrBool\n}\n\nconst isFalsy = bool => ['false'].includes(String(bool))\n\nconst isTruthy = bool => ['true'].includes(String(bool))\n\nconst isString = data => [\n  'string',\n].includes(typeof data)\n\nconst isNullify = data => [\n  undefined,\n  null,\n].includes(data)\n\nclass DryReplacer {\n  data: object\n  strict?: boolean = true\n  keepTypeof?: boolean = false\n\n  constructor(data: object, options?: Options) {\n    this.data = data\n    this.strict = options?.strict\n    this.keepTypeof = options?.keepTypeof\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n\n        if (isNullify(valueFromData)) {\n          valueFromData = ''\n        }\n\n        if (isFalsy(valueFromData) || isTruthy(valueFromData)) {\n          valueFromData = String(valueFromData)\n        }\n\n        if (isString(valueFromData)) {\n          if (this.strict) {\n            newValue = spotting.replace(item, valueFromData)\n          } else {\n            newValue = spotting.replace(item, valueFromData || '')\n          }\n        }\n\n        if (['number'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n\n          if (this.keepTypeof && /^-?\\.?_?\\d+$/.test(newValue)) {\n            newValue = Number(newValue)\n          }\n        }\n\n        if (isFalsy(newValue)) {\n          newValue = castBoolean(newValue)\n        }\n\n        if (isTruthy(newValue)) {\n          newValue = castBoolean(newValue)\n        }\n\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["castBoolean","strOrBool","includes","isFalsy","bool","String","isTruthy","isString","data","isNullify","undefined","DryReplacer","constructor","options","this","strict","keepTypeof","replaceValue","key","value","template","matchedArray","match","item","reverse","patternKey","replace","spotting","get","valueFromData","newValue","test","Number","set","recursiveReplace","Object","keys","isPlainObject","isArray","map","try","jsonToParse","JSON","parse"],"mappings":"sHAUA,MAAiBA,EAAGC,IACd,EAAC,EAAO,SAASC,SAASD,OAI1B,EAAC,EAAM,QAAQC,SAASD,IAK9BA,GAEME,EAAUC,GAAQ,CAAC,SAASF,SAASG,OAAOD,IAEpCE,EAAGF,GAAQ,CAAC,QAAQF,SAASG,OAAOD,IAE5CG,EAAWC,GAAQ,CACvB,UACAN,gBAAoBM,GAEPC,EAAGD,GAAQ,MACxBE,EACA,MACAR,SAASM,GAEX,MAAMG,EAKJC,YAAYJ,EAAcK,GAAiBC,KAJ3CN,UAAI,EAAAM,KACJC,QAAmB,EAAID,KACvBE,YAAuB,EAGrBF,KAAKN,KAAOA,EACZM,KAAKC,OAAgB,MAAPF,OAAO,EAAPA,EAASE,OACvBD,KAAKE,WAAoB,MAAPH,OAAO,EAAPA,EAASG,UAC7B,CAEAC,aAAaC,EAAaC,EAAYX,EAAcY,GAClD,IAAgBC,EAAGhB,OAAOc,GAAOG,MAAM,YAEvC,GAAID,EACF,IAAK,IAAIE,KAAQF,EAAaG,UAAW,CACvC,IAAcC,EAAGF,EAAKG,QAAQ,QAAS,IAC3BC,EAAGC,EAAIR,EAAUF,GAEZW,EAAGD,EAAIpB,EAAMiB,GAClBK,EAAGD,EAEXpB,EAAUoB,KACZA,EAAgB,KAGd1B,EAAQ0B,IAAkBvB,EAASuB,MACrCA,EAAgBxB,OAAOwB,IAGrBtB,EAASsB,KAETC,EAAWH,EAASD,QAAQH,EAD1BT,KAAKC,OAC2Bc,EAEAA,GAAiB,KAInD,CAAC,UAAU3B,gBAA6B2B,KAC1CC,EAAWH,EAASD,QAAQH,EAAMM,GAE9Bf,KAAKE,YAAc,eAAee,KAAKD,KACzCA,EAAWE,OAAOF,KAIlB3B,EAAQ2B,KACVA,EAAW9B,EAAY8B,IAGrBxB,EAASwB,KACXA,EAAW9B,EAAY8B,IAIzBG,EAAIb,EAAUF,EAAKY,EACpB,CAEL,CAEAI,iBAAiB1B,EAAcY,GAC7B,IAAK,IAAIF,KAAOiB,OAAOC,KAAKhB,GAAW,CACrC,IAASD,EAAGC,EAASF,GAEjBmB,EAAclB,GAChBL,KAAKoB,iBAAiB1B,EAAMW,GACnBmB,EAAQnB,GACjBA,EAAMoB,IAAKhB,GAAST,KAAKoB,iBAAiB1B,EAAMe,IAEhDT,KAAKG,aAAaC,EAAKC,EAAOX,EAAMY,EAEvC,CACD,OACFA,CAAA,CAEAoB,IAAIC,GACF,IAAYrB,EAAGsB,KAAKC,MAAMF,GAG1B,OAFA3B,KAAKoB,iBAAiBpB,KAAKN,KAAMY,GAE1BA,CACT"}