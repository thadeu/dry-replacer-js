{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\nclass DryReplacer {\n  data: object\n\n  constructor(data: object) {\n    this.data = data\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g)\n    \n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let templateValue = get(template, key)\n        let dataValue = get(data, patternKey)\n        let newValue = dataValue\n\n        if (['string'].includes(typeof dataValue)) {\n          newValue = templateValue.replace(new RegExp(item), dataValue)\n        }\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer"],"names":["DryReplacer","constructor","data","this","replaceValue","key","value","template","matchedArray","String","match","item","reverse","patternKey","replace","templateValue","get","dataValue","newValue","includes","set","recursiveReplace","Object","keys","isPlainObject","isArray","map","try","jsonToParse","JSON","parse"],"mappings":"sHAKA,MAAiBA,EAGfC,YAAYC,GAFZA,KAAAA,YAGEC,KAAKD,KAAOA,CACd,CAEAE,aAAaC,EAAaC,EAAYJ,EAAcK,GAClD,IAAIC,EAAeC,OAAOH,GAAOI,MAAM,YAEvC,GAAIF,EACF,IAAK,IAAQG,KAAgBH,EAACI,UAAW,CACvC,IAAIC,EAAaF,EAAKG,QAAQ,QAAS,IACnCC,EAAgBC,EAAIT,EAAUF,GACrBY,EAAGD,EAAId,EAAMW,GACdK,EAAGD,EAEX,CAAC,UAAUE,gBAAgBF,KAC7BC,EAAWH,EAAcD,QAAQ,WAAWH,GAAOM,IAGrDG,EAAIb,EAAUF,EAAKa,EACpB,CAEL,CAEAG,iBAAiBnB,EAAcK,GAC7B,IAAK,IAAIF,KAAOiB,OAAOC,KAAKhB,GAAW,CACrC,IAAID,EAAQC,EAASF,GAEjBmB,EAAclB,GAChBH,KAAKkB,iBAAiBnB,EAAMI,GACnBmB,EAAQnB,GACjBA,EAAMoB,IAAKf,GAASR,KAAKkB,iBAAiBnB,EAAMS,IAEhDR,KAAKC,aAAaC,EAAKC,EAAOJ,EAAMK,EAEvC,CACD,OAAOA,CACT,CAEAoB,IAAIC,GACF,IAAIrB,EAAWsB,KAAKC,MAAMF,GAG1B,OAFAzB,KAAKkB,iBAAiBlB,KAAKD,KAAMK,GAE1BA,CACT"}