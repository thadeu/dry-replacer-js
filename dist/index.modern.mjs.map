{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\ntype Options = {\n  strict?: boolean\n  keepTypeof?: boolean\n}\n\nclass DryReplacer {\n  data: object\n  strict?: boolean = true\n  keepTypeof?: boolean = false\n\n  constructor(data: object, options?: Options) {\n    this.data = data\n    this.strict = options?.strict\n    this.keepTypeof = options?.keepTypeof\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n\n        const isStringOrFalsy = [\n          'undefined',\n          undefined,\n          null,\n          'string',\n        ].includes(typeof valueFromData)\n\n        if (isStringOrFalsy) {\n          if (this.strict) {\n            newValue = spotting.replace(item, valueFromData)\n          } else {\n            newValue = spotting.replace(item, valueFromData || '')\n          }\n        }\n\n        if (['number'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n\n          if (this.keepTypeof && /^-?\\.?_?\\d+$/.test(newValue)) {\n            newValue = Number(newValue)\n          }\n        }\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string): object {\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["DryReplacer","constructor","data","options","this","strict","keepTypeof","replaceValue","key","value","template","matchedArray","String","match","item","reverse","patternKey","replace","get","valueFromData","newValue","undefined","includes","spotting","test","Number","set","recursiveReplace","keys","isPlainObject","isArray","map","try","jsonToParse","JSON","parse"],"mappings":"sHAUA,MAAMA,EAKJC,YAAYC,EAAcC,GAAiBC,KAJ3CF,UACAG,EAAAA,KAAAA,QAAmB,EAAID,KACvBE,YAAuB,EAGrBF,KAAKF,KAAOA,EACZE,KAAKC,OAASF,MAAAA,OAAAA,EAAAA,EAASE,OACvBD,KAAKE,WAAoB,MAAPH,OAAO,EAAPA,EAASG,UAC7B,CAEAC,aAAaC,EAAaC,EAAYP,EAAcQ,GAClD,IAAgBC,EAAGC,OAAOH,GAAOI,MAAM,YAEvC,GAAIF,EACF,IAAK,IAAIG,KAAoBH,EAACI,UAAW,CACvC,IAAIC,EAAaF,EAAKG,QAAQ,QAAS,MACxBC,EAAIR,EAAUF,GAEZW,EAAGD,EAAIhB,EAAMc,GAC1BI,EAAWD,EAES,CACtB,iBACAE,EACA,KACA,UACAC,gBAAgBH,KAIdC,EAAWG,EAASN,QAAQH,EAD1BV,KAAKC,OAC2Bc,EAEAA,GAAiB,KAInD,CAAC,UAAUG,qBACbF,EAAWG,EAASN,QAAQH,EAAMK,GAE9Bf,KAAKE,YAAc,eAAekB,KAAKJ,KACzCA,EAAWK,OAAOL,KAItBM,EAAIhB,EAAUF,EAAKY,EACpB,CAEL,CAEAO,iBAAiBzB,EAAcQ,GAC7B,IAAK,IAAOF,YAAWoB,KAAKlB,GAAW,CACrC,MAAYA,EAASF,GAEjBqB,EAAcpB,GAChBL,KAAKuB,iBAAiBzB,EAAMO,GACnBqB,EAAQrB,GACjBA,EAAMsB,IAAKjB,GAASV,KAAKuB,iBAAiBzB,EAAMY,IAEhDV,KAAKG,aAAaC,EAAKC,EAAOP,EAAMQ,EAEvC,CACD,OACFA,CAAA,CAEAsB,IAAIC,GACF,MAAeC,KAAKC,MAAMF,GAG1B,OAFA7B,KAAKuB,iBAAiBvB,KAAKF,KAAMQ,IAGnC"}