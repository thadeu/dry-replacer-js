{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import get from 'lodash.get'\nimport set from 'lodash.set'\nimport isArray from 'lodash.isarray'\nimport isPlainObject from 'lodash.isplainobject'\n\ntype Options = {\n  strict?: boolean\n  keepTypeof?: boolean\n  stringifyTypeof?: boolean\n  [key: string]: any\n}\n\nconst castBoolean = (strOrBool) => {\n  if ([false, 'false'].includes(strOrBool)) {\n    return false\n  }\n\n  if ([true, 'true'].includes(strOrBool)) {\n    return true\n  }\n\n  return strOrBool\n}\n\nconst isFalsy = (bool) => ['false'].includes(String(bool))\n\nconst isTruthy = (bool) => ['true'].includes(String(bool))\n\nconst isString = (data) => ['string'].includes(typeof data)\n\nconst isNullify = (data) => [undefined, null].includes(data)\n\nclass DryReplacer {\n  data: object\n  strict?: boolean = true\n  keepTypeof?: boolean = false\n  stringifyTypeof?: boolean = false\n\n  constructor(data: object, options?: Options) {\n    this.data = data\n    this.strict = options?.strict\n    this.keepTypeof = options?.keepTypeof\n    this.stringifyTypeof = options?.stringifyTypeof\n  }\n\n  replaceValue(key: string, value: any, data: object, template: object): void {\n    let matchedArray = String(value).match(/{{.*?}}/g) // extract only {{}} pattern\n\n    if (matchedArray) {\n      for (let item of matchedArray.reverse()) {\n        let patternKey = item.replace(/[{}]/g, '')\n        let spotting = get(template, key)\n\n        let valueFromData = get(data, patternKey)\n        let newValue = valueFromData\n\n        if (isNullify(valueFromData)) {\n          valueFromData = ''\n        }\n\n        if (isFalsy(valueFromData) || isTruthy(valueFromData)) {\n          valueFromData = String(valueFromData)\n        }\n\n        if (matchedArray.length > 1) {\n          if (this.stringifyTypeof && (Array.isArray(valueFromData) || isPlainObject(valueFromData))) {\n            valueFromData = JSON.stringify(valueFromData)\n          }\n        }\n\n        if (isString(valueFromData)) {\n          if (this.strict) {\n            newValue = spotting.replace(item, valueFromData)\n          } else {\n            newValue = spotting.replace(item, valueFromData || '')\n          }\n        }\n\n        if (['number'].includes(typeof valueFromData)) {\n          newValue = spotting.replace(item, valueFromData)\n\n          if (this.keepTypeof && /^-?\\.?_?\\d+$/.test(newValue)) {\n            newValue = Number(newValue)\n          }\n        }\n\n        if (isFalsy(newValue)) {\n          newValue = castBoolean(newValue)\n        }\n\n        if (isTruthy(newValue)) {\n          newValue = castBoolean(newValue)\n        }\n\n        set(template, key, newValue)\n      }\n    }\n  }\n\n  recursiveReplace(data: object, template: any): object {\n    for (let key of Object.keys(template)) {\n      let value = template[key]\n\n      if (isPlainObject(value)) {\n        this.recursiveReplace(data, value)\n      } else if (isArray(value)) {\n        value.map((item) => this.recursiveReplace(data, item))\n      } else {\n        this.replaceValue(key, value, data, template)\n      }\n    }\n    return template\n  }\n\n  try(jsonToParse: string, options = {}): object {\n    if (options) {\n      Object.assign(this, options)\n    }\n\n    let template = JSON.parse(jsonToParse)\n    this.recursiveReplace(this.data, template)\n\n    return template\n  }\n}\n\nexport default DryReplacer\n"],"names":["castBoolean","strOrBool","includes","isFalsy","bool","String","isTruthy","isString","data","isNullify","undefined","DryReplacer","constructor","options","strict","this","keepTypeof","stringifyTypeof","replaceValue","key","value","template","matchedArray","match","reverse","item","replace","spotting","get","valueFromData","patternKey","newValue","length","Array","isArray","isPlainObject","JSON","stringify","test","Number","set","recursiveReplace","Object","keys","map","try","jsonToParse","assign","parse"],"mappings":"sHAYA,MAAiBA,EAAIC,IACf,EAAC,EAAO,SAASC,SAASD,OAI1B,EAAC,EAAM,QAAQC,SAASD,OAOxBE,EAAWC,GAAS,CAAC,SAASF,SAASG,OAAOD,IAE9CE,EAAYF,GAAS,CAAC,QAAQF,SAASG,OAAOD,IAEtCG,EAAIC,GAAS,CAAC,UAAUN,gBAAgBM,GAEhDC,EAAaD,GAAS,MAACE,EAAW,MAAMR,SAASM,GAEvD,MAAMG,EAMJC,YAAYJ,EAAcK,GAL1BL,KAAAA,iBACAM,QAAmB,EAAIC,KACvBC,YAAuB,EACvBC,KAAAA,iBAA4B,EAG1BF,KAAKP,KAAOA,EACZO,KAAKD,OAASD,MAAAA,OAAAA,EAAAA,EAASC,OACvBC,KAAKC,WAAoB,MAAPH,OAAO,EAAPA,EAASG,WAC3BD,KAAKE,gBAAyB,MAAPJ,OAAO,EAAPA,EAASI,eAClC,CAEAC,aAAaC,EAAaC,EAAYZ,EAAca,GAClD,IAAgBC,EAAGjB,OAAOe,GAAOG,MAAM,YAEvC,GAAID,EACF,IAAK,SAAYA,EAAaE,UAAW,CACvC,MAAiBC,EAAKC,QAAQ,QAAS,IAC3BC,EAAGC,EAAIP,EAAUF,GAEzBU,EAAgBD,EAAIpB,EAAMsB,GAC1BC,EAAWF,EAEXpB,EAAUoB,KACZA,EAAgB,KAGd1B,EAAQ0B,IAAkBvB,EAASuB,MACrCA,EAAgBxB,OAAOwB,IAGrBP,EAAaU,OAAS,GACpBjB,KAAKE,kBAAoBgB,MAAMC,QAAQL,IAAkBM,EAAcN,MACzEA,EAAgBO,KAAKC,UAAUR,IAI/BtB,EAASsB,KAETE,EAAWJ,EAASD,QAAQD,EAD1BV,KAAKD,OAC2Be,EAEAA,GAAiB,KAInD,CAAC,UAAU3B,gBAAgB2B,KAC7BE,EAAWJ,EAASD,QAAQD,EAAMI,GAE9Bd,KAAKC,YAAc,eAAesB,KAAKP,KACzCA,EAAWQ,OAAOR,KAIlB5B,EAAQ4B,KACVA,EAAW/B,EAAY+B,IAGrBzB,EAASyB,KACXA,EAAW/B,EAAY+B,IAGzBS,EAAInB,EAAUF,EAAKY,EACpB,CAEL,CAEAU,iBAAiBjC,EAAca,GAC7B,IAAK,IAAOF,KAAUuB,OAACC,KAAKtB,GAAW,CACrC,IAAID,EAAQC,EAASF,GAEjBgB,EAAcf,GAChBL,KAAK0B,iBAAiBjC,EAAMY,GACnBc,EAAQd,GACjBA,EAAMwB,IAAKnB,GAASV,KAAK0B,iBAAiBjC,EAAMiB,IAEhDV,KAAKG,aAAaC,EAAKC,EAAOZ,EAAMa,EAEvC,CACD,OAAOA,CACT,CAEAwB,IAAIC,EAAqBjC,EAAU,CAAA,GAC7BA,GACF6B,OAAOK,OAAOhC,KAAMF,GAGtB,IAAIQ,EAAWe,KAAKY,MAAMF,GAG1B,OAFA/B,KAAK0B,iBAAiB1B,KAAKP,KAAMa,GAE1BA,CACT"}